#include "Engine.h"
#include "cube.h"
#include "glsl/cube-sapp.glsl.h"

thepit::State thepit::GlobalState;

void thepit::Init(void* State)
{
    sg_desc setup = {};
    setup.environment = sglue_environment();
    setup.logger.func = slog_func;
    sg_setup(&setup);

    // Create cube geometry, material, and mesh
    GeometryStruct cube = cube_geometry();  // Generate cube geometry
    GlobalState.cube_material = material();  // Initialize the material
    GlobalState.cube_mesh = mesh_init(&cube, &GlobalState.cube_material);  // Initialize mesh

    // Set the initial position of the cube
    GlobalState.cube_mesh.transform.position[0] = 0.0f;  // X
    GlobalState.cube_mesh.transform.position[1] = 0.0f;  // Y
    GlobalState.cube_mesh.transform.position[2] = -1.0f; // Z (move back slightly)


    GlobalState.pip = GlobalState.cube_mesh.pipeline;
    GlobalState.bind = GlobalState.cube_mesh.bindings;
}

void thepit::Frame(void* State) {
    /* NOTE: the vs_params_t struct has been code-generated by the shader-code-gen */
    vs_params_t vs_params;
    const float w = sapp_widthf();
    const float h = sapp_heightf();
    const float t = (float)(sapp_frame_duration() * 60.0);
    HMM_Mat4 proj = HMM_Perspective_RH_ZO(61.0f, w/h, 0.01f, 10.0f);
    HMM_Mat4 view = HMM_LookAt_RH(HMM_Vec3{0.0f, 1.5f, 6.0f}, HMM_Vec3{0.0f, 0.0f, 0.0f}, HMM_Vec3{0.0f, 1.0f, 0.0f});
    HMM_Mat4 view_proj = HMM_Mul(proj, view);
    GlobalState.rx += 1.0f * t; GlobalState.ry += 2.0f * t;
    HMM_Mat4 rxm = HMM_Rotate_RH(GlobalState.rx, HMM_Vec3{1.0f, 0.0f, 0.0f});
    HMM_Mat4 rym = HMM_Rotate_RH(GlobalState.ry, HMM_Vec3{0.0f, 1.0f, 0.0f});
    HMM_Mat4 model = HMM_Mul(rxm, rym);
    vs_params.mvp = HMM_Mul(view_proj, model);

    sg_pass pass = {};
    pass.action.colors[0].load_action = SG_LOADACTION_CLEAR;
    pass.action.colors[0].clear_value = { 0.25f, 0.5f, 0.75f, 1.0f };
    pass.swapchain = sglue_swapchain();

    sg_begin_pass(&pass);
    sg_apply_pipeline(GlobalState.pip);
    sg_apply_bindings(&GlobalState.bind);
    auto r = SG_RANGE(vs_params);
    sg_apply_uniforms(SG_SHADERSTAGE_VS, SLOT_vs_params, &r);
    sg_draw(0, 36, 1); // TODO: Fix magic number 36
    sg_end_pass();
    sg_commit();
}

void thepit::Cleanup(void* GlobalState)
{
	sg_shutdown();
	//TODO: Free up cube geometry
}

void thepit::HandleEvent(const sapp_event* Event, void* GlobalState)
{
}
